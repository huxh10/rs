enclave {
    from "sgx_tkey_exchange.edl" import *;

    include "sgx_key_exchange.h"

    trusted {
        public uint32_t handle_l_init_session(uint32_t src_id, uint32_t dst_id);
        public uint32_t handle_l_req_session(uint32_t src_id, uint32_t dst_id);
        public uint32_t handle_l_rep_msg1(uint32_t src_id, uint32_t dst_id, [in, size = msg_size] void *msg, size_t msg_size);
        public uint32_t handle_l_exch_report(uint32_t src_id, uint32_t dst_id, [in, size = msg_size] void *msg, size_t msg_size);
        public uint32_t handle_l_rep_msg3(uint32_t src_id, uint32_t dst_id, [in, size = msg_size] void *msg, size_t msg_size);
        public uint32_t handle_l_exch_data(uint32_t src_id, uint32_t dst_id, [in, size = msg_size] void *msg, size_t msg_size);
        public uint32_t handle_r_init_session(uint32_t src_id, uint32_t dst_id);
        public uint32_t init_ra(uint32_t src_id, int b_pse, [out] sgx_ra_context_t *p_context);
        public uint32_t handle_r_rep_msg0(uint32_t src_id, uint32_t dst_id, [in] sgx_ra_msg1_t *p_msg1);
        public uint32_t get_ra_context(uint32_t src_id, [out] sgx_ra_context_t *p_context);
        public uint32_t handle_r_send_msg2(uint32_t src_id, uint32_t dst_id, [in, size = msg_size] void *msg, size_t msg_size);
        public uint32_t handle_r_send_result(uint32_t src_id, uint32_t dst_id, [in, size = msg_size] void *msg, size_t msg_size);
    };

    untrusted {
        uint32_t agnt_send_message_ocall(uint32_t src_id, [in, size = resp_message_size] void *resp_message, size_t resp_message_size, int channel);
        void ocall_print_string([in, string] const char *str);
    };
};
